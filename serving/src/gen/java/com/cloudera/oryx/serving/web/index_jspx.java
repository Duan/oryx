/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2013-12-12 12:53:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package com.cloudera.oryx.serving.web;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Map;
import com.cloudera.oryx.common.stats.JVMEnvironment;
import com.cloudera.oryx.serving.stats.ServletStats;
import com.cloudera.oryx.common.stats.RunningStatistics;
import com.cloudera.oryx.common.stats.RunningStatisticsPerTime;
import com.cloudera.oryx.serving.web.AbstractOryxServlet;

public final class index_jspx extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>");
      out.write("<html>");
      out.write("<head>");
      out.write("<title>");
      out.write("Oryx Serving Layer");
      out.write("</title>");
      out.write("<link href=\"/style.jspx\" type=\"text/css\" rel=\"stylesheet\"/>");
      out.write("<script type=\"text/javascript\">");
      out.write("\nfunction doQuery(endpoint, isGet, paramSuffixes, postBodyElement) {\n\n    if (typeof(paramSuffixes) == \"undefined\") {\n        paramSuffixes = [];\n    }\n    if (typeof(postBodyElement) == \"undefined\") {\n        postBodyElement = null;\n    }\n\n    var httpmethod = isGet ? \"GET\" : \"POST\";\n    var pathElements = [];\n    pathElements.push(endpoint);\n\n    var paramPrefix = endpoint.replace(\"/\", \"\");\n    for (var i = 0; i < paramSuffixes.length; i++) {\n        var elementValue = document.getElementById(paramPrefix + \"-\" + paramSuffixes[i]).value;\n        elementValue = encodeURIComponent(elementValue);\n        // Hack: we have to double-escape forward-slash so that Tomcat won't read it as a path delimiter,\n        // then un-escape again on the other end. / already becomes %2F, and so %2F becomes %252F\n        elementValue = elementValue.replace(/%2F/gi,\"%252F\");\n        pathElements.push(elementValue);\n    }\n    var path = pathElements.join(\"/\");\n    var resultElement = document.getElementById(\"request-result\");\n\n    resultElement.innerHTML = \"[Querying...]\";\n");
      out.write("    var xmlHttp = new XMLHttpRequest();\n    xmlHttp.onreadystatechange = function() {\n        if (xmlHttp.readyState == 4) {\n            var httpStatus = xmlHttp.status;\n            if (httpStatus == 200) {\n                var responseText = xmlHttp.responseText;\n                if (responseText.length == 0) {\n                    responseText = \"[empty]\";\n                }\n                resultElement.innerHTML = responseText;\n            } else {\n                resultElement.innerHTML = \"[HTTP Error \" + httpStatus + \" \" + xmlHttp.statusText + \"]\";\n            }\n        }\n    };\n    xmlHttp.open(httpmethod, path);\n    xmlHttp.setRequestHeader(\"Accept\", \"text/plain\");\n    if (postBodyElement == null) {\n        xmlHttp.send(null);\n    } else {\n        xmlHttp.send(document.getElementById(postBodyElement).value);\n    }\n    return false;\n}\n\nfunction handleReturn(event, endpoint, isGet, paramSuffixes, postBodyElement) {\n    if (event.keyCode == 13) {\n        doQuery(endpoint, isGet, paramSuffixes, postBodyElement);\n");
      out.write("        return false;\n    }\n    return true;\n}\n\nfunction expandOrCollapse(divID, arrowSpanID) {\n  var theDiv = document.getElementById(divID);\n  var theArrowSpan = document.getElementById(arrowSpanID);\n  if (theDiv.style.display == 'none') {\n    theDiv.style.display = 'block';\n    theArrowSpan.innerHTML = '&#x25BC;';\n  } else {\n    theDiv.style.display = 'none';\n    theArrowSpan.innerHTML = '&#x25B6;';\n  }\n}\n");
      out.write("</script>");
      out.write("</head>");
      out.write("<body>");
      out.write("<div style=\"width:800px;margin-left:auto;margin-right:auto;padding:10px\">");
      out.write("<h1>");
      out.write("Oryx Serving Layer");
      out.write("</h1>");

pageContext.setAttribute("jvmEnv", new JVMEnvironment());

      out.write("<table>");
      out.write("<tr>");
      out.write("<td>");
      out.write("Host");
      out.write("</td>");
      out.write("<td style=\"text-align:left\">");
      out.write("<code>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${jvmEnv.hostName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</code>");
      out.write("</td>");
      out.write("</tr>");
      out.write("<tr>");
      out.write("<td>");
      out.write("Heap Used");
      out.write("</td>");
      out.write("<td style=\"text-align:left\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${jvmEnv.usedMemoryMB}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("MB (");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${jvmEnv.percentUsedMemory}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write('%');
      out.write(')');
      out.write("</td>");
      out.write("</tr>");
      out.write("<tr>");
      out.write("<td>");
      out.write("Logs");
      out.write("</td>");
      out.write("<td style=\"text-align:left\">");
      out.write("<a target=\"_blank\" href=\"log.txt\">");
      out.write("View");
      out.write("</a>");
      out.write("</td>");
      out.write("</tr>");
      out.write("</table>");
      out.write("<hr/>");
      out.write("<h2>");
      out.write("<span onclick=\"expandOrCollapse('endpoint-stats','endpoint-stats-arrow')\">");
      out.write("Endpoint Stats\n  ");
      out.write("<span id=\"endpoint-stats-arrow\">");
      out.write('â–¶');
      out.write("</span>");
      out.write("</span>");
      out.write("</h2>");
      out.write("<div style=\"display:none\" id=\"endpoint-stats\">");
      out.write("<table style=\"width:100%\">");
      out.write("<tr>");
      out.write("<th>");
      out.write("Service");
      out.write("</th>");
      out.write("<th>");
      out.write("Requests");
      out.write("<br/>");
      out.write("(last hour)");
      out.write("</th>");
      out.write("<th>");
      out.write("Average (&mu;s)");
      out.write("<br/>");
      out.write("(last hour)");
      out.write("</th>");
      out.write("<th>");
      out.write("Max (&mu;s)");
      out.write("<br/>");
      out.write("(last hour)");
      out.write("</th>");
      out.write("<th>");
      out.write("Client");
      out.write("<br/>");
      out.write("Errors");
      out.write("</th>");
      out.write("<th>");
      out.write("Server");
      out.write("<br/>");
      out.write("Errors");
      out.write("</th>");
      out.write("</tr>");

    @SuppressWarnings("unchecked")
    Map<String,ServletStats> timings =
        (Map<String,ServletStats>) application.getAttribute(AbstractOryxServlet.TIMINGS_KEY);
    for (Map.Entry<String,ServletStats> entry : timings.entrySet()) {
      pageContext.setAttribute("entry", entry);
  
      out.write("<tr>");
      out.write("<td style=\"font-family:Courier,monospace;text-align:left\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${entry.key}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</td>");

        RunningStatistics allTimeNanosec = entry.getValue().getAllTimeNanosec();
        pageContext.setAttribute("averageMicroSec", (long) (allTimeNanosec.getMean() / 1000.0));
        pageContext.setAttribute("maxMicroSec", (long) (allTimeNanosec.getMax() / 1000.0));
        RunningStatisticsPerTime lastHourNanosec = entry.getValue().getLastHourNanosec();
        pageContext.setAttribute("averageLastHourMicroSec", (long) (lastHourNanosec.getMean() / 1000.0));
        pageContext.setAttribute("maxLastHourMicroSec", (long) (lastHourNanosec.getMax() / 1000.0));
        pageContext.setAttribute("clientErrors", entry.getValue().getNumClientErrors());
        pageContext.setAttribute("serverErrors", entry.getValue().getNumServerErrors());
      
      out.write("<td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${entry.value.allTimeNanosec.count}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("<br/>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${entry.value.lastHourNanosec.count}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</td>");
      out.write("<td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${averageMicroSec}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("<br/>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${averageLastHourMicroSec}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</td>");
      out.write("<td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${maxMicroSec}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("<br/>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${maxLastHourMicroSec}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</td>");
      out.write("<td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${clientErrors}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</td>");
      out.write("<td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${serverErrors}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</td>");
      out.write("</tr>");

    }
  
      out.write("</table>");
      out.write("</div>");
      out.write("<hr/>");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/test.jspx", out, false);
      out.write("<p>");
      out.write("&copy; Cloudera, Inc., except for included third-party open source software.");
      out.write("</p>");
      out.write("</div>");
      out.write("</body>");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
